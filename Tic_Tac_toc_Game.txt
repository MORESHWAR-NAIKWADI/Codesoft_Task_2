import numpy as np

# Constants for the players
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Function to print the board
def print_board(board):
    print("\n")
    for row in board:
        print(" | ".join(row))
        print("-" * 9)
    print("\n")

# Function to check for a win
def check_winner(board):
    for row in board:
        if row[0] == row[1] == row[2] != EMPTY:
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != EMPTY:
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] != EMPTY:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return board[0][2]
    return None

# Function to check if the board is full
def is_full(board):
    return all(cell != EMPTY for row in board for cell in row)

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == PLAYER_O:
        return 1  # AI wins
    elif winner == PLAYER_X:
        return -1  # Human wins
    elif is_full(board):
        return 0  # Tie

    if is_maximizing:
        best_score = -np.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    score = minimax(board, depth + 1, False)
                    board[i][j] = EMPTY
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = np.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    score = minimax(board, depth + 1, True)
                    board[i][j] = EMPTY
                    best_score = min(score, best_score)
        return best_score

# Function for the AI move
def ai_move(board):
    best_score = -np.inf
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_O
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Main game loop
def play_game():
    board = np.full((3, 3), EMPTY)
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        # Player X move
        while True:
            try:
                row = int(input("Enter your move row (0, 1, 2): "))
                col = int(input("Enter your move column (0, 1, 2): "))
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_X
                    break
                else:
                    print("Cell already taken, try again.")
            except (ValueError, IndexError):
                print("Invalid input, please enter row and column numbers (0-2).")

        print_board(board)
        if check_winner(board):
            print("Congratulations! You win!")
            break
        if is_full(board):
            print("It's a tie!")
            break

        # AI O move
        print("AI is making a move...")
        row, col = ai_move(board)
        board[row][col] = PLAYER_O
        print_board(board)
        if check_winner(board):
            print("AI wins! Better luck next time.")
            break
        if is_full(board):
            print("It's a tie!")
            break

# Start the game
if _name_ == "_main_":
    play_game()